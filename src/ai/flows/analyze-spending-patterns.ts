// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides AI-powered insights to analyze spending patterns and identify potential overspending areas.
 *
 * - analyzeSpendingPatterns - Analyzes transaction data to provide insights on spending.
 * - AnalyzeSpendingPatternsInput - The input type for the analyzeSpendingPatterns function.
 * - AnalyzeSpendingPatternsOutput - The return type for the analyzeSpendingPatterns function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import {Transaction} from '@/services/transaction-categorizer';

const AnalyzeSpendingPatternsInputSchema = z.object({
  transactions: z
    .array(
      z.object({
        description: z.string().describe('Description of the transaction'),
        amount: z.number().describe('Amount of the transaction'),
        category: z.string().describe('Category of the transaction'),
      })
    )
    .describe('Array of transactions to analyze'),
  monthlyBudget: z
    .record(z.string(), z.number())
    .optional()
    .describe('Optional monthly budget to check against.'),
});

export type AnalyzeSpendingPatternsInput = z.infer<
  typeof AnalyzeSpendingPatternsInputSchema
>;

const AnalyzeSpendingPatternsOutputSchema = z.object({
  insights: z
    .array(z.string())
    .describe('Array of insights on spending patterns and potential overspending areas'),
});

export type AnalyzeSpendingPatternsOutput = z.infer<
  typeof AnalyzeSpendingPatternsOutputSchema
>;

export async function analyzeSpendingPatterns(
  input: AnalyzeSpendingPatternsInput
): Promise<AnalyzeSpendingPatternsOutput> {
  return analyzeSpendingPatternsFlow(input);
}

const analyzeSpendingPatternsPrompt = ai.definePrompt({
  name: 'analyzeSpendingPatternsPrompt',
  input: {
    schema: z.object({
      transactions: z
        .array(
          z.object({
            description: z.string().describe('Description of the transaction'),
            amount: z.number().describe('Amount of the transaction'),
            category: z.string().describe('Category of the transaction'),
          })
        )
        .describe('Array of transactions to analyze'),
      monthlyBudget: z
        .record(z.string(), z.number())
        .optional()
        .describe('Optional monthly budget to check against.'),
    }),
  },
  output: {
    schema: z.object({
      insights: z
        .array(z.string())
        .describe('Array of insights on spending patterns and potential overspending areas'),
    }),
  },
  prompt: `Given the following transaction data and optional monthly budget, analyze the spending patterns and identify potential overspending areas. Provide insights that can help the user make informed financial decisions.

Transactions:
{{#each transactions}}
- Description: {{description}}, Amount: {{amount}}, Category: {{category}}
{{/each}}

{{#if monthlyBudget}}
Monthly Budget:
{{#each monthlyBudget}}
- {{@key}}: {{this}}
{{/each}}
{{/if}}

Insights:
`, // Use Handlebars templating
});

const analyzeSpendingPatternsFlow = ai.defineFlow<
  typeof AnalyzeSpendingPatternsInputSchema,
  typeof AnalyzeSpendingPatternsOutputSchema
>(
  {
    name: 'analyzeSpendingPatternsFlow',
    inputSchema: AnalyzeSpendingPatternsInputSchema,
    outputSchema: AnalyzeSpendingPatternsOutputSchema,
  },
  async input => {
    const {output} = await analyzeSpendingPatternsPrompt(input);
    return output!;
  }
);
